apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: redis-6-cluster
message: |-
  The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

         Password: ${REDIS_PASSWORD}
   Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/5.
metadata:
  annotations:
    description: |-
      Redis in-memory data structure store, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/5.

      WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing
    iconClass: icon-redis
    openshift.io/display-name: Redis 6 Cluster
    openshift.io/documentation-url: https://github.com/sclorg/redis-container/tree/master/6
    openshift.io/long-description: This template provides a Redis 6 cluster using StatefulSets for both master and slave.  The data is stored on persistent storage.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    samples.operator.openshift.io/version: 4.7.8
    tags: database,redis
  labels:
    samples.operator.openshift.io/managed: "false"
  name: redis-6-cluster
  namespace: openshift
parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: PersistentVolumeClaim size
    displayName: Storage Size
    name: PERSISTENT_SIZE
    required: true
    value: 1Gi
  - description: Number of nodes
    displayName: Cluster nodes number
    name: CLUSTER_SIZE
    value: '3'
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: redis
  - description: Password for the Redis connection user.
    displayName: Redis Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: REDIS_PASSWORD
    required: true
  - description: Version of Redis image to be used (1, 1-7 or latest).
    displayName: Version of Redis Image
    name: REDIS_VERSION
    required: true
    value: 1-7
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: create-redis-cluster
  data:
    create_cluster: |
      #!/bin/bash
      # Wait for pending masters
      if [[ $(oc get pods -l role=master -n ${CURRENT_NAMESPACE} | grep Pending) ]]; 
      then 
        pod=$(oc get pods -l role=master -n ${CURRENT_NAMESPACE} | grep Pending | awk '{print $1}')
        echo "$pod still pending... Check Persistent Volumes"; 
        sleep 30;
        exit 1;
      fi
      # Wait for pending slaves
      if [[ $(oc get pods -l role=master -n ${CURRENT_NAMESPACE} | grep Pending) ]]; 
      then
        pod=$(oc get pods -l role=master -n ${CURRENT_NAMESPACE} | grep Pending | awk '{print $1}')
        echo "$pod still pending... Check Persistent Volumes"; 
        sleep 30;
        exit 1;
      fi
      # Check for all masters
      if [[ ! $(oc get pods -l role=master -n ${CURRENT_NAMESPACE} | grep "Running" | wc -l) == "3" ]];
      then
        echo "Not all master pods are running. Waiting a bit...";
        sleep 30;
        exit 1;
      fi
      # Check for all slaves
      if [[ ! $(oc get pods -l role=slave -n ${CURRENT_NAMESPACE} | grep "Running" | wc -l) == "3" ]];
      then
        echo "Not all slave pods are running. Waiting a bit...";
        sleep 30;
        exit 1;
      fi
      export REDIS_CLUSTER_CMD=$(oc get pods -l role=master -n ${CURRENT_NAMESPACE} -o go-template="{{\"/usr/bin/redis-cli --cluster create\"}}{{range .items}}{{\" \"}}{{.status.podIP}}{{\":6379\"}}{{end}}{{\" --cluster-yes -a $DB_PASSWORD\"}}")
      oc exec -t ${DATABASE_SERVICE_NAME}-master-0 -n ${CURRENT_NAMESPACE} -c redis-master -- /bin/bash -c "$REDIS_CLUSTER_CMD"
      #Â Create replicas
      for NODE in 0 1 2
      do
        MASTER_IP=$(oc get pod ${DATABASE_SERVICE_NAME}-master-${NODE} -n ${CURRENT_NAMESPACE} -o go-template='{{.status.podIP}}')
        SLAVE_IP=$(oc get pod ${DATABASE_SERVICE_NAME}-slave-${NODE} -n ${CURRENT_NAMESPACE} -o go-template='{{.status.podIP}}')
        oc exec -t ${DATABASE_SERVICE_NAME}-master-${NODE} -n ${CURRENT_NAMESPACE} -c redis-master -- /bin/bash -c "/usr/bin/redis-cli --cluster add-node ${SLAVE_IP}:6379 ${MASTER_IP}:6379 --cluster-slave -a $DB_PASSWORD"
      done
      exit 0
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: run-redis
  data:
    run-redis: |
      #!/bin/bash
      export_vars=$(cgroup-limits); export $export_vars
      source ${CONTAINER_SCRIPTS_PATH}/common.sh
      set -eu
      [ -f ${CONTAINER_SCRIPTS_PATH}/validate-variables.sh ] && source ${CONTAINER_SCRIPTS_PATH}/validate-variables.sh
      # Process the Redis configuration files
      log_info 'Processing Redis configuration files ...'
      if [[ -v REDIS_PASSWORD ]]; then
        envsubst < ${CONTAINER_SCRIPTS_PATH}/password.conf.template >> /etc/redis.conf
      else
        log_info 'WARNING: setting REDIS_PASSWORD is recommended'
      fi
      if [[ "${SERVER_MODE}" == "master" || "${SERVER_MODE}" == "slave" ]]; then
        echo "cluster-enabled yes" >> /etc/redis.conf
        [ -f /var/lib/redis/data/nodes.conf ] && sed -ri "/myself/s/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/${REDIS_NODE_IP}/" /var/lib/redis/data/nodes.conf
      fi
      # Source post-init source if exists
      if [ -f ${CONTAINER_SCRIPTS_PATH}/post-init.sh ]; then
        log_info 'Sourcing post-init.sh ...'
        source ${CONTAINER_SCRIPTS_PATH}/post-init.sh
      fi
      # Restart the Redis server with public IP bindings
      unset_env_vars
      log_volume_info "${REDIS_DATADIR}"
      log_info 'Running final exec -- Only Redis logs after this point'
      exec ${REDIS_PREFIX}/bin/redis-server /etc/redis.conf --daemonize no "$@" 2>&1
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    annotations:
      template.openshift.io/expose-password: '{.data[''database-password'']}'
  stringData:
    database-password: ${REDIS_PASSWORD}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${DATABASE_SERVICE_NAME}-master-headless
    labels:
      app: ${DATABASE_SERVICE_NAME}-master
      role: master
  spec:
    ports:
      - name: redis-master
        protocol: TCP
        port: 6379
        targetPort: 6379
    selector:
      app: ${DATABASE_SERVICE_NAME}-master
      role: master
    clusterIP: None
    clusterIPs:
      - None
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${DATABASE_SERVICE_NAME}-master
    labels:
      app: ${DATABASE_SERVICE_NAME}-master
      role: master
  spec:
    ports:
      - name: redis-master
        protocol: TCP
        port: 6379
        targetPort: 6379
    selector:
      app: ${DATABASE_SERVICE_NAME}-master
      role: master
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${DATABASE_SERVICE_NAME}-slave-headless
    labels:
      app: ${DATABASE_SERVICE_NAME}-slave
      role: slave
  spec:
    ports:
      - name: redis-slave
        protocol: TCP
        port: 6379
        targetPort: 6379
    selector:
      app: ${DATABASE_SERVICE_NAME}-slave
      role: slave
    clusterIP: None
    clusterIPs:
      - None
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${DATABASE_SERVICE_NAME}-slave
    labels:
      app: ${DATABASE_SERVICE_NAME}-slave
      role: slave
  spec:
    ports:
      - name: redis-slave
        protocol: TCP
        port: 6379
        targetPort: 6379
    selector:
      app: ${DATABASE_SERVICE_NAME}-slave
      role: slave
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: redis-cluster-admin
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: admin-to-redis-cluster-admin
  subjects:
    - kind: ServiceAccount
      name: redis-cluster-admin
  roleRef:
    kind: ClusterRole
    name: admin
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: ${DATABASE_SERVICE_NAME}-master
    labels:
      app: ${DATABASE_SERVICE_NAME}-master
      role: master
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: ${DATABASE_SERVICE_NAME}-master
        role: master
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${DATABASE_SERVICE_NAME}-master
          role: master
      spec:
        volumes:
          - name: run-redis
            configMap:
              name: run-redis
              defaultMode: 365
        containers:
          - resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 100m
                memory: 128Mi
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            name: redis-master
            livenessProbe:
              tcpSocket:
                port: 6379
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            env:
              - name: SERVER_MODE
                value: master
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${DATABASE_SERVICE_NAME}
                    key: database-password
              - name: SETUP_MODE
                value: cluster
              - name: PERSISTENCE_ENABLED
                value: 'true'
              - name: REDIS_NODE_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: ${DATABASE_SERVICE_NAME}-master
                mountPath: /var/lib/redis/data/
              - name: run-redis
                mountPath: /usr/bin/run-redis
                subPath: run-redis
            terminationMessagePolicy: File
            image: 'registry.redhat.io/rhel8/redis-6:latest'
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    volumeClaimTemplates:
      - kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: ${DATABASE_SERVICE_NAME}-master
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          volumeMode: Filesystem
          # storageClassName: redis-master-sc
    serviceName: ${DATABASE_SERVICE_NAME}-master
    podManagementPolicy: OrderedReady
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        partition: 0
    revisionHistoryLimit: 10
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: ${DATABASE_SERVICE_NAME}-slave
    labels:
      app: ${DATABASE_SERVICE_NAME}-slave
      role: slave
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: ${DATABASE_SERVICE_NAME}-slave
        role: slave
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${DATABASE_SERVICE_NAME}-slave
          role: slave
      spec:
        volumes:
          - name: run-redis
            configMap:
              name: run-redis
              defaultMode: 365
        containers:
          - resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 100m
                memory: 128Mi
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            name: redis-slave
            livenessProbe:
              tcpSocket:
                port: 6379
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            env:
              - name: SERVER_MODE
                value: slave
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${DATABASE_SERVICE_NAME}
                    key: database-password
              - name: SETUP_MODE
                value: cluster
              - name: PERSISTENCE_ENABLED
                value: 'true'
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: ${DATABASE_SERVICE_NAME}-slave
                mountPath: /var/lib/redis/data/
              - name: run-redis
                mountPath: /usr/bin/run-redis
                subPath: run-redis
            terminationMessagePolicy: File
            image: 'registry.redhat.io/rhel8/redis-6:latest'
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
      volumes:
        - name: redis-config
          configMap:
            name: redis
            defaultMode: 420
    volumeClaimTemplates:
      - kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: ${DATABASE_SERVICE_NAME}-slave
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: ${PERSISTENT_SIZE}
          volumeMode: Filesystem
          # storageClassName: redis-slave-sc
    serviceName: ${DATABASE_SERVICE_NAME}-slave
    podManagementPolicy: OrderedReady
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        partition: 0
    revisionHistoryLimit: 10
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: create-redis-cluster
  spec:
    parallelism: 1
    completions: 1
    activeDeadlineSeconds: 3600
    backoffLimit: 20
    template:
      metadata:
        name: create-redis-cluster
      spec:
        containers:
        - name: create-redis-cluster
          image: registry.redhat.io/openshift4/ose-cli
          env:
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis
                key: database-password
          - name: CURRENT_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /usr/local/bin/create_cluster
          volumeMounts:
            - name: create-redis-cluster-script
              mountPath: /usr/local/bin
        restartPolicy: OnFailure
        serviceAccountName: redis-cluster-admin
        volumes:
        - name: create-redis-cluster-script
          configMap:
            name: create-redis-cluster
            defaultMode: 0755
